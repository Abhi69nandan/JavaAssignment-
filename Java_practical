1. INTRODUCTION TO JAVA

1. import java.util.*;

public class IntroQ1 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Name: ");      String name = sc.nextLine();
        System.out.print("Roll no: ");   int roll = sc.nextInt();
        System.out.print("Marks in 3 subjects (space-separated): ");
        int m1 = sc.nextInt(), m2 = sc.nextInt(), m3 = sc.nextInt();
        int total = m1 + m2 + m3;
        double avg = total / 3.0;
        System.out.println("\nStudent: " + name + " (Roll " + roll + ")");
        System.out.println("Total = " + total + ", Average = " + avg);
        sc.close();
    }
}

2. import java.util.*;

public class IntroQ2 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter a (+, -, *, /): "); char op = sc.next().charAt(0);
        System.out.print("Enter two numbers: "); double a = sc.nextDouble(), b = sc.nextDouble();
        switch (op) {
            case '+': System.out.println(a + b); break;
            case '-': System.out.println(a - b); break;
            case '*': System.out.println(a * b); break;
            case '/': System.out.println(b != 0 ? a / b : "Division by zero"); break;
            default:  System.out.println("Invalid operator");
        }
        sc.close();
    }
}

3. import java.util.*;

public class IntroQ3 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        if (n % 2 == 0) System.out.println("Even");
        else System.out.println("Odd");
        sc.close();
    }
}


2. CLASSES AND OBJECT

1. import java.util.*;

class Student2 {
    private String name; private int id; private int marks;
    void input(Scanner sc) {
        System.out.print("Name ID Marks: ");
        name = sc.next(); id = sc.nextInt(); marks = sc.nextInt();
    }
    void display() { System.out.println("Student{name='" + name + "', id=" + id + ", marks=" + marks + "}"); }
}

public class ClassesQ1 {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Student2 s = new Student2(); s.input(sc); s.display(); sc.close();
    }
}

2. class Rectangle {
    double length, breadth;
    Rectangle(double l, double b){ length=l; breadth=b; }
    double area(){ return length * breadth; }
    double perimeter(){ return 2 * (length + breadth); }
    @Override public String toString(){ return "Rectangle(" + length + ", " + breadth + ")"; }
}
public class ClassesQ2 {
    public static void main(String[] args) {
        Rectangle r = new Rectangle(5, 3);
        System.out.println(r + " Area=" + r.area() + " Perimeter=" + r.perimeter());
    }
}

3. class TemperatureConverter {
    static double cToF(double c){ return (c * 9/5) + 32; }
    static double fToC(double f){ return (f - 32) * 5/9.0; }
}
public class ClassesQ3 {
    public static void main(String[] args) {
        System.out.println("25C -> " + TemperatureConverter.cToF(25) + "F");
        System.out.println("98.6F -> " + TemperatureConverter.fToC(98.6) + "C");
    }
}


3. INHERITANCE 

1. class Person {
    String name; int age;
    Person(String n,int a){ name=n; age=a; }
    void show(){ System.out.println("Person: " + name + ", " + age); }
}
class Teacher extends Person {
    String subject; double salary;
    Teacher(String n,int a,String s,double sal){ super(n,a); subject=s; salary=sal; }
    @Override void show(){ super.show(); System.out.println("Teaches: " + subject + ", Salary: " + salary); }
}
public class InheritQ1 {
    public static void main(String[] args) {
        Teacher t = new Teacher("Arun", 35, "Maths", 55000);
        t.show();
    }
}

2. class PersonC {
    String name;
    PersonC(String n){ name=n; System.out.println("PersonC ctor"); }
}
class EmployeeC extends PersonC {
    int empId;
    EmployeeC(String n,int id){ super(n); empId=id; System.out.println("EmployeeC ctor"); }
}
class ManagerC extends EmployeeC {
    String dept;
    ManagerC(String n,int id,String d){ super(n,id); dept=d; System.out.println("ManagerC ctor"); }
}
public class InheritQ2 {
    public static void main(String[] args) {
        ManagerC m = new ManagerC("Neha", 101, "IT");
        System.out.println(m.name + " " + m.empId + " " + m.dept);
    }
}

3. class Animal {
    void sound(){ System.out.println("Some sound"); }
}
class Dog extends Animal { @Override void sound(){ System.out.println("Woof"); } }
class Cat extends Animal { @Override void sound(){ System.out.println("Meow"); } }
class Cow extends Animal { @Override void sound(){ System.out.println("Moo"); } }

public class InheritQ3 {
    public static void main(String[] args) {
        Animal[] a = { new Dog(), new Cat(), new Cow() };
        for (Animal x : a) x.sound();
    }
}

4. Polymorphism 

1. class Calculator {
    int multiply(int a,int b){ return a*b; }
    double multiply(double a,double b){ return a*b; }
}
public class PolyQ1 {
    public static void main(String[] args) {
        Calculator c = new Calculator();
        System.out.println(c.multiply(3,4));
        System.out.println(c.multiply(2.5,4.2));
    }
}

2. abstract class Shape {
    abstract double area();
}
class Circle extends Shape {
    double r; Circle(double r){ this.r=r; }
    double area(){ return Math.PI * r * r; }
}
class Triangle extends Shape {
    double b,h; Triangle(double b,double h){ this.b=b; this.h=h; }
    double area(){ return 0.5 * b * h; }
}
class Rect extends Shape {
    double l,w; Rect(double l,double w){ this.l=l; this.w=w; }
    double area(){ return l*w; }
}
public class PolyQ2 {
    public static void main(String[] args) {
        Shape[] shapes = { new Circle(3), new Triangle(5,4), new Rect(6,2) };
        for (Shape s : shapes) System.out.println(s.getClass().getSimpleName()+" area="+s.area());
    }
}

3. public class PolyQ3 {
    public static void main(String[] args) {
        Shape s = new Circle(2);
        if (s instanceof Circle) System.out.println("It's a Circle");
        if (s instanceof Shape)  System.out.println("Also a Shape");
        System.out.println("s instanceof Rect? " + (s instanceof Rect));
    }
}


5. ABSTRACTION AND ENCAPSULATION 

1. abstract class Appliance {
    private String brand;
    Appliance(String brand){ this.brand = brand; }
    public String getBrand(){ return brand; }           // encapsulated field
    public abstract void start();
}
class Fan extends Appliance {
    Fan(String brand){ super(brand); }
    @Override public void start(){ System.out.println(getBrand() + " Fan spinning..."); }
}
class WashingMachine extends Appliance {
    WashingMachine(String brand){ super(brand); }
    @Override public void start(){ System.out.println(getBrand() + " WashingMachine washing..."); }
}
public class AbsEncapQ1 {
    public static void main(String[] args) {
        Appliance a1 = new Fan("Usha");
        Appliance a2 = new WashingMachine("LG");
        a1.start(); a2.start();
    }
}

2. class BankAccount {
    private int accountNumber;
    private double balance;

    public BankAccount(int accNo, double bal) {
        this.accountNumber = accNo;
        this.balance = bal;
    }

    // Getters and setters
    public int getAccountNumber() { return accountNumber; }
    public double getBalance() { return balance; }
    public void deposit(double amount) { balance += amount; }
    public void withdraw(double amount) { 
        if(amount <= balance) balance -= amount; 
        else System.out.println("Insufficient balance!");
    }
}

public class BankAccountTest {
    public static void main(String[] args) {
        BankAccount acc = new BankAccount(101, 5000);
        acc.deposit(2000);
        acc.withdraw(3000);
        System.out.println("Account " + acc.getAccountNumber() + " Balance: " + acc.getBalance());
    }
}

3. interface Drawable {
    void draw();
}

class Circle implements Drawable {
    public void draw() { System.out.println("Drawing a Circle"); }
}

class Square implements Drawable {
    public void draw() { System.out.println("Drawing a Square"); }
}

public class InterfaceDemo {
    public static void main(String[] args) {
        Drawable d1 = new Circle();
        Drawable d2 = new Square();
        d1.draw();
        d2.draw();
    }
}


6. PACKAGES AND ACCESS CONTROL 

1. package mathops;

public class Operations {
    public int add(int a, int b) { return a + b; }
    public int subtract(int a, int b) { return a - b; }
}

import mathops.Operations;

public class TestMathOps {
    public static void main(String[] args) {
        Operations op = new Operations();
        System.out.println("Add: " + op.add(5,3));
        System.out.println("Subtract: " + op.subtract(5,3));
    }
}

2. class ModifiersDemo {
    private int privateVar = 10;
    int defaultVar = 20; // default
    protected int protectedVar = 30;
    public int publicVar = 40;

    private void privateMethod(){ System.out.println("Private method"); }
    void defaultMethod(){ System.out.println("Default method"); }
    protected void protectedMethod(){ System.out.println("Protected method"); }
    public void publicMethod(){ System.out.println("Public method"); }
}

public class AccessModifiersTest {
    public static void main(String[] args) {
        ModifiersDemo obj = new ModifiersDemo();
        // obj.privateVar; // ❌ can't access
        System.out.println(obj.defaultVar);
        System.out.println(obj.protectedVar);
        System.out.println(obj.publicVar);
        obj.defaultMethod();
        obj.protectedMethod();
        obj.publicMethod();
    }
}

3. package package1;

public class A {
    public void display() {
        System.out.println("Class A from package1");
    }
}
package package2;

import package1.A;

public class B {
    public static void main(String[] args) {
        A obj = new A();
        obj.display();
    }
}


7. EXCEPTION HANDLING 

1. import java.util.*;

public class DivideNumbers {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        try {
            System.out.print("Enter two numbers: ");
            int a = sc.nextInt(), b = sc.nextInt();
            int result = a / b;  // risky
            System.out.println("Result = " + result);
        } catch (ArithmeticException e) {
            System.out.println("Error: Division by zero not allowed!");
        }
        sc.close();
    }
}

2.public class ArrayExceptionDemo {
    public static void main(String[] args) {
        int[] arr = {1, 2, 3};
        try {
            System.out.println(arr[5]);  // invalid access
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Error: Invalid array index!");
        }
    }
}

3. import java.util.*;

class UnderAgeException extends Exception {
    public UnderAgeException(String msg) { super(msg); }
}

public class AgeCheck {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter age: ");
        int age = sc.nextInt();

        try {
            if (age < 18) throw new UnderAgeException("Age must be 18 or above!");
            System.out.println("Valid age, access granted.");
        } catch (UnderAgeException e) {
            System.out.println("Caught Exception: " + e.getMessage());
        }
        sc.close();
    }
}
